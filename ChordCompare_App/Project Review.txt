My goal for this project was to be able to compare to chords on a staff quickly with some color highlighting. I fell well short of achieving that. I was able to get the major components working together to well enough to demo the concept. The details have been difficult to manage as I will explain below. I ended up scaling back quite a bit, after working with VexFlow enough to decide my original design approach was less than optimal.

The most challenging piece of the project was the browser front end. I chose a javascript package called VexFlow for drawing music calligraphy. The rendered music is quite good. Getting it to do even simple things however is tedious. The data modeling and coding can be very fussy. The documentation is very limited. The source code is available, but not much help for understanding how it all works together. I think the results are well worth the effort, but the learning curve is steeper than I anticipated.

I chose to use a postgres database for data storage because I wanted to leave plenty of room to expand on the basic idea. For this project I was using only major and minor scales and triads. In future it would be possible to include any type of scale, as well as any desired chords. Changing data structures in a database is easier than changed stored data in source code, I think. The database also serves to decouple the data from the program logic.

I used a nodejs http server package called 'express' between the database and web browser. It hides quite a lot of the nitty-gritty of a web server behind some fairly easy to use functions. I connected to the database with node-posgres and pg-promise. All three of these packages make use of Promises for asynchronous communication. I found somewhat unclear how to use the data returned by the promises. In some cases a promise would return  another promise, which threw me at first. 